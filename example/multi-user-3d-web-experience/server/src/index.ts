import fs from "fs";
import path from "path";
import url from "url";

import {
  Networked3dWebExperienceServer,
  Networked3dWebExperienceServerConfig,
} from "@mml-io/3d-web-experience-server";
import type { CharacterDescription } from "@mml-io/3d-web-user-networking";
import express from "express";
import enableWs from "express-ws";

import { BasicUserAuthenticator } from "./BasicUserAuthenticator";

const dirname = url.fileURLToPath(new URL(".", import.meta.url));

const PORT = process.env.PORT || 8080;

// Specify the avatar to use here:
const characterDescription: CharacterDescription = {
  // Option 1 (Default) - Use a GLB file directly
  meshFileUrl: "/assets/models/bot.glb", // This is just an address of a GLB file
  // Option 2 - Use an MML Character from a URL
  // mmlCharacterUrl: "https://...",
  // Option 3 - Use an MML Character from a string
  // mmlCharacterString: `
  // <m-character src="/assets/models/mml_body_male.glb">
  //   <m-model src="/assets/models/mml_head_hispanic_male.glb"></m-model>
  //   <m-model src="/assets/models/mml_hair_black.glb"></m-model>
  //   <m-model src="/assets/models/mml_torso_hoodie.glb"></m-model>
  //   <m-model src="/assets/models/mml_legs_grey_pants.glb"></m-model>
  //   <m-model src="/assets/models/mml_shoes_retro_white.glb"></m-model>
  // </m-character>
  // `,
};

const userAuthenticator = new BasicUserAuthenticator(characterDescription, {
  /*
   This option allows sessions that are reconnecting from a previous run of the server to connect even if the present a
   session token that was not generated by this run of the server.

   This is useful for development, but in deployed usage, it is recommended to set this to false.
  */
  devAllowUnrecognizedSessions: true,
});

const webClientBuildDir = path.join(dirname, "../../client/build/");
const indexContent = fs.readFileSync(path.join(webClientBuildDir, "index.html"), "utf8");
const mmlDocumentsDirectoryRoot = path.resolve(dirname, "../mml-documents");
const mmlDocumentsWatchPath = "**/*.html";

const { app } = enableWs(express());
app.enable("trust proxy");

const networked3dWebExperienceServer = new Networked3dWebExperienceServer({
  networkPath: "/network",
  userAuthenticator,
  mmlServing: {
    documentsWatchPath: mmlDocumentsWatchPath,
    documentsDirectoryRoot: mmlDocumentsDirectoryRoot,
    documentsUrl: "/mml-documents/",
  },
  webClientServing: {
    indexUrl: "/",
    indexContent,
    clientBuildDir: webClientBuildDir,
    clientUrl: "/web-client/",
    clientWatchWebsocketPath:
      process.env.NODE_ENV !== "production" ? "/web-client-build" : undefined,
  },
  enableChat: true,
  assetServing: {
    assetsDir: path.resolve(dirname, "../../../assets/"),
    assetsUrl: "/assets/",
  },
} satisfies Networked3dWebExperienceServerConfig);
networked3dWebExperienceServer.registerExpressRoutes(app);

// Start listening
console.log("Listening on port", PORT);
app.listen(PORT);
